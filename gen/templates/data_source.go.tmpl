//go:build ignore
// Copyright Â© 2025 Scott Wiederhold <s.e.wiederhold@gmail.com>
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// This file is generated "gen/generator.go"
// !!CHANGES TO THIS FILE WILL BE OVERWRITTEN!!

package datasources

import (
	"context"
	"fmt"
	"net/url"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/scottw514/terraform-provider-datapower/client"
	"github.com/scottw514/terraform-provider-datapower/internal/provider/actions"
	"github.com/scottw514/terraform-provider-datapower/internal/provider/models"
	"github.com/scottw514/terraform-provider-datapower/internal/provider/tfutils"
{{- if not .UpdateOnly}}
	"github.com/tidwall/gjson"
{{- end}}
)

{{- if not .UpdateOnly}}
type {{.Name}}{{if .WriteOnlyAttrs}}WO{{end}}List struct {
	{{- if and (ne .Name "Domain") (hasDomainAttribute .Attributes)}}
	AppDomain types.String       `tfsdk:"app_domain"`
	{{- end}}
	Result    types.List `tfsdk:"result"`
}

{{- end}}
var (
	_ datasource.DataSource              = &{{.Name}}DataSource{}
	_ datasource.DataSourceWithConfigure = &{{.Name}}DataSource{}
)

func New{{.Name}}DataSource() datasource.DataSource {
	return &{{.Name}}DataSource{}
}

type {{.Name}}DataSource struct {
	pData *tfutils.ProviderData
}

func (d *{{.Name}}DataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{toTfName .Name}}"
}

func (d *{{.Name}}DataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: {{quote .Description}},
		Attributes: map[string]schema.Attribute{
{{- if not .UpdateOnly}}
	{{- if and (ne .Name "Domain") (hasDomainAttribute .Attributes)}}
			"app_domain": schema.StringAttribute{
				MarkdownDescription: "The name of the application domain the object belongs to",
				Required:            true,
			},
	{{- end}}
			"result": schema.ListNestedAttribute{
				MarkdownDescription: "List of objects",
				Computed:            true,
				NestedObject:        schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
{{- end}}
{{- $updateOnly := .UpdateOnly}}
{{- range  .Attributes}}
	{{- if and .Type (not .WriteOnly)}}
						"{{.TfName}}": schema.{{if eq .Type "Object"}}SingleNested{{else if isList .}}List{{- if and (ne .ElementType "String") (ne .ElementType "Int64")}}Nested{{end}}{{else}}{{.Type}}{{end}}Attribute{
							MarkdownDescription: {{quote .Description}},
		{{- if isList .}}
			{{- if or (eq .ElementType "String") (eq .ElementType "Int64") (eq .ElementType "Bool")}}
							ElementType:         types.{{.ElementType}}Type,
			{{- else}}
							NestedObject:        models.Get{{.ElementType}}DataSourceSchema(),
			{{- end}}
		{{- end}}
		{{- if and $updateOnly (eq .Name "AppDomain")}}
							Required:            true,
		{{- else }}
							Computed:            true,
		{{- end}}
		{{- if and .Sensitive (eq .ElementType "String")}}
							Sensitive:           true,
		{{- end}}
						},
	{{- else if and .DmType (not .WriteOnly)}}
						"{{.TfName}}": models.Get{{.DmType}}DataSourceSchema({{quote .Description}}, {{quote .CliAlias}}, {{quote (toTfName .ReferenceTo)}}),
	{{- end}}
{{- end}}
						"dependency_actions": actions.ActionsSchema,
					},
{{- if not .UpdateOnly}}
				},
			},
		},
{{- end}}
	}
}

func (d *{{.Name}}DataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.pData = req.ProviderData.(*tfutils.ProviderData)
}

func (d *{{.Name}}DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	d.pData.Mu.Lock()
	defer d.pData.Mu.Unlock()

	var data {{if .UpdateOnly}}models.{{end}}{{.Name}}{{if .WriteOnlyAttrs}}WO{{end}}{{if not .UpdateOnly}}List{{end}}
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

{{- if not .UpdateOnly}}
	o := models.{{.Name}}{{if .WriteOnlyAttrs}}WO{{end}}{
		{{- if and (hasDomainAttribute .Attributes) (ne .Name "Domain")}}
		AppDomain: data.AppDomain,
		{{- end}}
	}
{{- end}}

	res, err := d.pData.Client.Get({{if .UpdateOnly}}data{{else}}o{{end}}.GetPath())
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

{{- if .UpdateOnly}}
	data.FromBody(ctx, `{{.Name}}`, res)
{{- else}}
	l := []models.{{.Name}}{{if .WriteOnlyAttrs}}WO{{end}}{}
	if value := res.Get(`{{.Name}}`); value.Exists() {
		for _, v := range value.Array() {
			item := models.{{.Name}}{{if .WriteOnlyAttrs}}WO{{end}}{}
			item.FromBody(ctx, "", v)
			if !item.IsNull() {
				l = append(l, item)
			}
		}
	}
	if len(l) > 0 {
		var diag diag.Diagnostics
		data.Result, diag = types.ListValueFrom(ctx, types.ObjectType{AttrTypes: models.{{.Name}}ObjectType{{if .WriteOnlyAttrs}}WO{{end}}}, l)
		resp.Diagnostics.Append(diag...)
		if resp.Diagnostics.HasError() {
			return
		}
	} else {
		data.Result = types.ListNull(types.ObjectType{AttrTypes: models.{{.Name}}ObjectType{{if .WriteOnlyAttrs}}WO{{end}}})
	}
{{- end}}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
