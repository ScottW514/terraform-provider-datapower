name: CompileSettings
description: Configure customized compile settings.
cli_alias: compile-settings
cmd_group: compile-options
rest_endpoint: /mgmt/config/{domain}/CompileSettings
attributes:
- name: Id
  tf_name: id
  path: name
  type: String
  required: true
  test_value: '"ResTestCompileSettings"'
  test_expect_ds: '"AccTest_CompileSettings"'
  example: CompileSettingsName
  description: Name of the object. Must be unique among object types in application
    domain.
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: AppDomain
  tf_name: app_domain
  type: String
  required: true
  example: test_domain
  description: The name of the application domain the object belongs to
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: UserSummary
  type: String
  description: Comments
  cli_alias: summary
- name: XSLTVersion
  type: String
  enum:
  - XSLT10
  - XSLT10_IT23272
  - XSLT20
  - StylesheetSpecified
  default: XSLT10
  description: Specifies the XSLT processor version. The default value is XSLT10.
  cli_alias: xslt-version
- name: Strict
  type: Bool
  default: true
  description: Specifies whether to enable strict XSLT error checking. Non-strict
    operations attempt to recover from certain errors, such as use of undeclared variables,
    calling undeclared templates, and so forth. By default, strict XSLT error checking
    is enabled.
  cli_alias: strict
- name: Profile
  type: Bool
  default: false
  description: Specifies whether to enable stylesheet profiling. This option should
    not be used in production environments. By default, stylesheet profiling is disabled.
  cli_alias: profile
- name: Debug
  type: Bool
  default: false
  description: Specifies whether to run the stylesheet, XQuery script, and JSONiq
    script in debug mode. When a stylesheet, XQuery script, or JSONiq script is run
    in debug mode, it generates a custom web page instead of displaying its normal
    output. The web page details exactly what occurred during execution, including
    the values of variables and where particular pieces of the output came from. This
    option should not be used in production environments. By default, debug mode is
    disabled.
  cli_alias: debug
- name: Stream
  type: Bool
  default: false
  description: Specifies whether the stylesheet must be run in streaming mode. Transformation
    of the document begins before the input is fully parsed. Not all stylesheets can
    be streamed. If the stylesheet cannot be streamed, an error is generated and the
    input is not processed. By default, streaming mode is disabled.
  cli_alias: stream
- name: TryStream
  type: Bool
  default: false
  description: Specifies whether to attempt to run the stylesheet in streaming mode.
    Transformation of the document begins before the input is fully parsed. Not all
    stylesheets can be streamed. If the stylesheet cannot be streamed, a warning is
    generated during compilation and the stylesheet is read in the entire input as
    normal at execution time. By default, attempting to run the stylesheet in streaming
    mode is disabled.
  cli_alias: try-stream
- name: MinimumEscaping
  type: Bool
  default: false
  description: Specifies whether to escape output produced from the stylesheet during
    processing. Minimal escaping is particularly useful when handling non-English
    character sets. By default, minimum escaping is disabled.
  cli_alias: minesc
- name: StackSize
  type: Int64
  minimum: 10240
  maximum: 104857600
  default: 1048576
  description: Indicates the maximum number of bytes that the stack is allowed to
    use while executing a stylesheet or other compiled content. This setting is used
    to block infinite recursion. The minimum value is 10 kilobytes, or 10,240 bytes.
    The maximum value is 100 megabytes, or 104,857,600 bytes. The default value is
    1 megabyte, or 1,048,576 bytes.
  cli_alias: stack-size
- name: WSIValidation
  type: String
  enum:
  - ignore
  - warn
  - fail
  default: warn
  description: Specifies the validation behavior to apply to WSDL files that are checked
    for conformance to section 5 of WS-I Basic Profile (version 1.0, April 2004).
    The default setting is Warn.
  cli_alias: wsi-validate
- name: WSDLValidateBody
  type: String
  enum:
  - strict
  - lax
  - skip
  default: strict
  description: Specifies the validation behavior for the soap:Body. The default setting
    is Strict.
  cli_alias: wsdl-validate-body
- name: WSDLValidateHeaders
  type: String
  enum:
  - strict
  - lax
  - skip
  default: lax
  description: Specifies the validation behavior for the soap:Header. The default
    setting is Lax.
  cli_alias: wsdl-validate-headers
- name: WSDLValidateFaults
  type: String
  enum:
  - strict
  - lax
  - skip
  default: strict
  description: Specifies the validation behavior for the fault detail. The default
    setting is Strict.
  cli_alias: wsdl-validate-faults
- name: WSDLWrappedFaults
  type: Bool
  default: false
  description: Specifies whether to require compatibility with RPC-style wrappers.
    By default, RPC-style wrappers are not required.
  cli_alias: wsdl-wrapped-faults
- name: AllowSoapEncArray
  type: Bool
  default: false
  description: Specifies whether to allow the schema to accept most uses of elements
    with xsi:type='SOAP-ENC:Array' consistent with SOAP 1.1 Section 5, even when these
    attributes violate the XML Schema specification. Normally the xsi:type attribute
    must name a type equal to or derived from the actual type of the element. For
    schemas compiled with this option, xsi:type is accepted specifically for the SOAP
    1.1 Encoding 'Array' complex type if the element type is derived from SOAP-ENC:Array.
    The opposite is the normal allowable case. By default, elements with xsi:type='SOAP-ENC:Array'
    are not accepted.
  cli_alias: allow-soap-enc-array
- name: ValidateSoapEncArray
  type: Bool
  default: false
  description: Specifies whether to perform extra schema validation following the
    encoding rules in SOAP 1.1 Section 5. When enabled, members of SOAP arrays are
    validated, attributes such as @id and @href are allowed even if they are not allowed
    by the schema, and @href values are checked to ensure that they have a corresponding
    @id element. By default, the extra validation is not performed.
  cli_alias: validate-soap-enc-array
- name: WildcardsIgnoreXsiType
  type: Bool
  default: false
  description: Specifies whether xs:any elements in the schema validate only child
    elements by name. The XML Schema specification requires that, if a wildcard matches
    an element but that element does not have an element declaration, the element
    is instead validated according to an xsi:type attribute on it. This option ignores
    those xsi:type attributes. It should be used for cases such as SOAP envelope validation
    where a further validation step will validate the contents matching the wildcard,
    possibly using the SOAP 1.1 encoding rules. By default, xsi:type attributes are
    not ignored.
  cli_alias: wildcards-ignore-xsi-type
- name: WSDLStrictSOAPVersion
  type: Bool
  default: false
  description: Specifies whether to strictly follow the SOAP binding in the WSDL.
    When enabled, only messages bound to SOAP 1.2 appear in SOAP 1.2 envelopes and
    only messages bound to SOAP 1.1 appear in SOAP 1.1 envelopes. By default, strict
    SOAP binding is disabled.
  cli_alias: wsdl-strict-soap-version
- name: XACMLDebug
  type: Bool
  default: false
  description: Specifies whether to compile XACML policies with debug information.
    Note that the XACML debugging messages are also controlled by the log event in
    the XACML category. Use the debug log level to view the full XACML debugging messages.
    By default, XACML policies are not compiled with debug information.
  cli_alias: xacml-debug
- name: AllowXOPInclude
  type: Bool
  default: false
  description: <p>Specifies whether the schema or WSDL document accepts messages where
    base64-encoded binary content was optimized according to the MTOM/XOP specifications.
    XOP binary-optimization replaces base64-encoded binary data with an xop:Include
    reference element that references the unencoded binary data located in an attachment.
    By default, MTOM/XOP optimized messages are disabled.</p><ul><li>When disabled,
    such optimized messages are rejected by validation of the optimized form. Rejection
    occurs because the schema specifies a simple type that accepts base64-encoded
    data, such as xs:base64Binary or xs:string, but the message contains an xop:Include
    element instead.</li><li>When enabled, an xop:Include element can optionally appear
    in place of content for any XML Schema simple type that validates base64-encoded
    binary data. The xop:Include element itself will be validated according to the
    built-in schema in store:///schemas/xop.xsd.</li></ul>
  cli_alias: allow-xop-include
