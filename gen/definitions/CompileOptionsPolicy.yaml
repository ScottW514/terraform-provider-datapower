name: CompileOptionsPolicy
description: Configure/Edit Compile Option Policies
cli_alias: compile-options
cmd_group: compile-options
rest_endpoint: /mgmt/config/{domain}/CompileOptionsPolicy
attributes:
- name: Id
  tf_name: id
  path: name
  type: String
  required: true
  test_value: '"ResTestCompileOptionsPolicy"'
  test_expect_ds: '"AccTest_CompileOptionsPolicy"'
  example: CompileOptionsPolicyName
  description: Name of the object. Must be unique among object types in application
    domain.
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: AppDomain
  tf_name: app_domain
  type: String
  required: true
  example: test_domain
  description: The name of the application domain the object belongs to
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: UserSummary
  type: String
  description: Comments
  cli_alias: summary
- name: XSLTVersion
  type: String
  enum:
  - XSLT10
  - XSLT10_IT23272
  - XSLT20
  - StylesheetSpecified
  default: XSLT10
  description: Select the XSLT processor version.
  cli_alias: xslt-version
- name: Strict
  type: Bool
  default: false
  description: Enable strict XSLT error-checking; non-strict operation attempts to
    recover from certain errors such as use of undeclared variables, calling undeclared
    templates, and so forth.
  cli_alias: strict
- name: Profile
  type: String
  reference_to: URLMap
  description: Designates a set of stylesheets to be profiled based on their URL.
    This should not be used in production environments.
  cli_alias: profile
- name: Debug
  type: String
  reference_to: URLMap
  description: Designates a set of stylesheets, XQuery scripts, and JSONiq scripts
    to be run in debug mode. When a stylesheet, XQuery script, or JSONiq script is
    run in debug mode, it generates a custom web page instead of displaying its normal
    output. The web page details exactly what occurred during execution, including
    the values of variables and where particular pieces of the output came from. This
    should not be used in production environments.
  cli_alias: debug
- name: Stream
  type: String
  reference_to: URLMap
  description: Designates a set of stylesheets which must be run in streaming mode.
    Transformation of the document begins before the input is fully parsed. Not all
    stylesheets can be streamed; if a stylesheet cannot be streamed, an error will
    be issued and the input will not be processed. See the DataPower manual for suggestions
    on producing streamable stylesheets.
  cli_alias: stream
- name: TryStream
  type: String
  reference_to: URLMap
  description: Designates a set of stylesheets to attempt to run in streaming mode.
    Transformation of the document begins before the input is fully parsed. Not all
    stylesheets can be streamed; if a stylesheet cannot be streamed, a warning will
    be issued during compilation and the stylesheet will read in the entire input
    as normal at execution time. See the DataPower manual for suggestions on producing
    streamable stylesheets.
  cli_alias: try-stream
- name: MinimumEscaping
  type: String
  reference_to: URLMap
  description: Select a URL Map from the list. Output produced from stylesheets that
    meet the URL map criteria are not escaped during processing. Escaping is enabled
    by default. Minimal escaping is particularly useful when handling non-English
    character sets.
  cli_alias: minesc
- name: StackSize
  type: Int64
  minimum: 10240
  maximum: 104857600
  default: 524288
  description: Indicates the maximum number of bytes the stack is allowed to use while
    executing a stylesheet or other compiled content. This blocks infinite recursion.
    The minimum value is 10 kilobytes, or 10,240 bytes. The default is half a megabyte,
    or 524,288 bytes.
  cli_alias: stack-size
- name: PreferXG4
  type: String
  reference_to: URLMap
  description: <p>Designates a set of stylesheets or schemas that must use XML hardware
    acceleration when possible. XML hardware acceleration will be used only if the
    first action in a processing policy is a schema validation against a fixed schema.
    Any schemas specified here will use XML hardware acceleration if hardware resources
    are available. Schemas not specified here may also use XML hardware acceleration,
    but those schemas will be displaced in favor of schemas specified here.</p><p>When
    XML hardware acceleration is disabled in the Systems Settings, the XML Hardware
    Acceleration Preferred Rule has no effect.</p>
  cli_alias: prefer-xg4
- name: DisallowXG4
  type: String
  reference_to: URLMap
  description: <p>Designates a set of stylesheets or schemas that will never use XML
    hardware acceleration. XML hardware acceleration will be used only if the first
    action in a processing policy is a schema validation against a fixed schema. Any
    schemas specified here will not use XML hardware acceleration even if hardware
    resources are available.</p><p>When XML hardware acceleration is disabled in the
    Systems Settings, the XML Hardware Acceleration Disallowed Rule has no effect.</p>
  cli_alias: disallow-xg4
- name: WSIValidation
  type: String
  enum:
  - ignore
  - warn
  - fail
  default: ignore
  description: Select the validation behavior to apply to WSDL files that are checked
    for conformance to section 5 of WS-I Basic Profile (version 1.0, April 2004).
    The default is Ignore.
  cli_alias: wsi-validate
- name: WSDLValidateBody
  type: String
  enum:
  - strict
  - lax
  - skip
  default: strict
  description: Select the validation behavior for the soap:Body. The default is Strict.
  cli_alias: wsdl-validate-body
- name: WSDLValidateHeaders
  type: String
  enum:
  - strict
  - lax
  - skip
  default: lax
  description: Select the validation behavior for the soap:Header. The default is
    Lax.
  cli_alias: wsdl-validate-headers
- name: WSDLValidateFaults
  type: String
  enum:
  - strict
  - lax
  - skip
  default: strict
  description: Select the validation behavior for the fault detail. The default is
    Strict.
  cli_alias: wsdl-validate-faults
- name: WSDLWrappedFaults
  type: Bool
  default: false
  description: For compatibility, require a rpc-style wrapper around fault details
    that are specified by type.
  cli_alias: wsdl-wrapped-faults
- name: AllowSoapEncArray
  type: String
  reference_to: URLMap
  description: Designates a set of schemas that will accept most uses of elements
    with xsi:type='SOAP-ENC:Array' consistent with SOAP 1.1 Section 5, even when these
    attributes violate the XML Schema specification. Normally the xsi:type attribute
    must name a type equal to or derived from the actual type of the element. For
    schemas compiled with this option, xsi:type is accepted specifically for the SOAP
    1.1 Encoding 'Array' complex type if the element's type is derived from SOAP-ENC:Array;
    this is the opposite of the normal allowable case.
  cli_alias: allow-soap-enc-array
- name: ValidateSoapEncArray
  type: String
  reference_to: URLMap
  description: Designates a set of schemas that will do extra validation following
    the encoding rules in SOAP 1.1 Section 5. This validates members of SOAP arrays,
    allows attributes such as @id and @href even if not allowed by the schema, and
    checks that @href values have a corresponding @id element.
  cli_alias: validate-soap-enc-array
- name: WildcardsIgnoreXsiType
  type: String
  reference_to: URLMap
  description: Designates a set of schemas where wildcards (xs:any elements) only
    validate children by element name. The XML Schema specification requires that,
    if a wildcard matches an element but that element does not have an element declaration,
    the element is instead validated according to an xsi:type attribute on it. This
    option ignores those xsi:type attributes. It should be used for cases such as
    SOAP envelope validation where a further validation step will validate the contents
    matching the wildcard, possibly using the SOAP 1.1 encoding rules.
  cli_alias: wildcards-ignore-xsi-type
- name: WSDLStrictSOAPVersion
  type: Bool
  default: false
  description: When on, follow the version of the SOAP Binding in the WSDL, allowing
    only messages bound to SOAP 1.2 to appear in SOAP 1.2 envelopes and messages bound
    to SOAP 1.1 to appear in SOAP 1.1 envelopes. The default is off.
  cli_alias: wsdl-strict-soap-version
- name: XACMLDebug
  type: Bool
  default: false
  description: Setting to "on" to make the XACML compiler to put more debugging information
    when evaluate a policy. Note that the XACML debugging messages are also controlled
    by the log event in the 'XACML' category. Use the "debug" log level to view the
    full XACML debugging messages.
  cli_alias: xacml-debug
- name: AllowXOPInclude
  type: String
  reference_to: URLMap
  description: <p>Designates a set of schema or WSDL documents that accept messages
    where base64-encoded binary content was optimized according to the MTOM/XOP specifications.
    XOP binary-optimization replaces base64-encoded binary data with an xop:Include
    reference element that references the unencoded binary data located in an attachment.</p><ul><li>When
    disabled, such optimized messages are rejected by validation of the optimized
    form. Rejection occurs because the schema specifies a simple type that accepts
    base64-encoded data, such as xs:base64Binary or xs:string, but the message contains
    an xop:Include element instead.</li><li>When enabled, an xop:Include element can
    optionally appear in place of content for any XML Schema simple type that validates
    base64-encoded binary data. The xop:Include element itself will be validated according
    to the built-in schema in store:///schemas/xop.xsd.</li></ul>
  cli_alias: allow-xop-include
