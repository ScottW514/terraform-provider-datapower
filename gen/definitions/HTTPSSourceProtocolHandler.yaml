name: HTTPSSourceProtocolHandler
description: An HTTPS handler receives HTTP requests over TLS and forwards them to
  the appropriate DataPower service. HTTPS handlers conform to RFC 2616.
cli_alias: source-https
cmd_group: mpgw
rest_endpoint: /mgmt/config/{domain}/HTTPSSourceProtocolHandler
actions:
- name: quiesce
attributes:
- name: Id
  tf_name: id
  path: name
  type: String
  required: true
  test_value: '"ResTestHTTPSSourceProtocolHandler"'
  test_expect_ds: '"AccTest_HTTPSSourceProtocolHandler"'
  example: HTTPSSourceProtocolHandlerName
  description: Name of the object. Must be unique among object types in application
    domain.
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: AppDomain
  tf_name: app_domain
  type: String
  required: true
  example: test_domain
  description: The name of the application domain the object belongs to
  string_patterns:
  - ^[a-zA-Z0-9_-]+$
  string_min_length: 1
  string_max_length: 128
- name: UserSummary
  type: String
  description: Comments
  cli_alias: summary
- name: LocalAddress
  type: String
  default: 0.0.0.0
  description: Specify the IP address or host alias that the handler listens. The
    default value indicates that The handler listens on all IPv4 addresses.
  cli_alias: local-address
- name: LocalPort
  type: Int64
  minimum: 1
  maximum: 65535
  default: 443
  description: Port
  cli_alias: port
- name: HTTPVersion
  type: String
  enum:
  - HTTP/1.0
  - HTTP/1.1
  default: HTTP/1.1
  description: Specify the HTTP version for client connections. The default value
    is HTTP/1.1. For the HTTP/2 protocol, requests and responses are always HTTP/2.
    When HTTP/2, this setting is ignored.
  cli_alias: http-client-version
- name: AllowedFeatures
  dm_type: DmSourceHTTPFeatureType
  description: Allowed methods and versions
  cli_alias: allowed-features
- name: PersistentConnections
  type: Bool
  default: true
  description: Specify whether to negotiate persistent connections with clients. The
    HTTP/2 protocol controls persistent connections and reuse. Therefore, this setting
    is ignored for the HTTP/2 protocol.
  cli_alias: persistent-connections
- name: MaxPersistentConnectionsReuse
  type: Int64
  description: 'Specify the maximum number of times that a client can reuse a persistent
    connection. When this count is reached, an explicit <tt>HTTP Connection: close</tt>
    header is sent in the response, and the TCP connection is closed. The default
    value is 0, which means unlimited reuse.'
  cli_alias: max-persistent-reuse
  ignored_when:
  - evaluation: property-equals
    attribute: PersistentConnections
    value:
    - 'off'
- name: AllowCompression
  type: Bool
  default: false
  description: Specify whether to negotiate GZIP compression for client connections.
    When enabled and the <tt>Accept-Encoding</tt> HTTP header indicates that compressed
    documents can be processed, the service uses GZIP to compress HTTP transmissions.
    The <tt>Transfer-Encoding</tt> HTTP header indicates compression.
  cli_alias: compression
- name: AllowWebSocketUpgrade
  type: Bool
  default: false
  description: Specify whether to allow WebSocket upgrade requests from clients. The
    default value is disabled. This request is to switch the existing connection to
    use the WebSocket protocol. WebSocket upgrade requests require that The handler
    allows GET methods.
  cli_alias: websocket-upgrade
  ignored_when:
  - evaluation: property-equals
    attribute: HTTPVersion
    value:
    - HTTP/1.0
- name: WebSocketIdleTimeout
  type: Int64
  maximum: 86400
  description: Specify the maximum idle time in seconds for client connections. This
    timer monitors the idle time in the data transfer process. When the specified
    idle time is exceeded, the connection is torn down. Enter a value in the range
    0 - 86400. The default value is 0, which indicates that the timer is disabled.
  cli_alias: websocket-idle-timeout
  required_when:
  - evaluation: logical-and
    conditions:
    - evaluation: property-equals
      attribute: AllowWebSocketUpgrade
      value:
      - 'on'
    - evaluation: property-does-not-equal
      attribute: HTTPVersion
      value:
      - HTTP/1.0
  ignored_when:
  - evaluation: logical-true
- name: MaxURLLen
  type: Int64
  minimum: 1
  maximum: 128000
  default: 16384
  description: Specify the length in bytes of the longest incoming URL to accept.
    The length includes any query string or fragment identifier. Enter a value in
    the range 1 - 128000. The default value is 16384.
  cli_alias: max-url-len
- name: MaxTotalHdrLen
  type: Int64
  minimum: 5
  maximum: 128000
  default: 128000
  description: Specify the maximum aggregate length in bytes of HTTP headers to allow.
    Enter a value in the range 5 - 128000. The default value is 128000.
  cli_alias: max-total-header-len
- name: MaxHdrCount
  type: Int64
  description: Specify the maximum number of headers to allow in client requests.
    The default value is 0, which indicates no limit.
  cli_alias: max-header-count
- name: MaxNameHdrLen
  type: Int64
  description: Specify the maximum length in bytes of a header name to allow in client
    requests. Each HTTP header is expressed as a name-value pair. This setting sets
    the maximum length of the name portion of a header. The default value is 0, which
    indicates no limit.
  cli_alias: max-header-name-len
- name: MaxValueHdrLen
  type: Int64
  description: Specify the maximum length of a header value in bytes to allow in client
    requests. Each HTTP header is expressed as a name-value pair. This setting sets
    the maximum length of the value portion of a header. The default value is 0, which
    indicates no limit.
  cli_alias: max-header-value-len
- name: MaxQueryStringLen
  type: Int64
  description: Specify the maximum length of the query string in bytes to allow in
    client requests. The query string is the portion of the URL after the ? character.
    The default value is 0, which indicates no limit.
  cli_alias: max-querystring-len
- name: ACL
  type: String
  reference_to: AccessControlList
  description: Access control list
  cli_alias: acl
- name: CredentialCharset
  type: String
  enum:
  - protocol
  - ascii
  - utf8
  - big5
  - cp1250
  - cp1251
  - cp1252
  - cp1253
  - cp1254
  - cp1255
  - cp1256
  - cp1257
  - cp1258
  - euc_jp
  - euc_kr
  - gb18030
  - gb2312
  - iso2022_jp
  - iso2022_kr
  - iso8859_1
  - iso8859_2
  - iso8859_4
  - iso8859_5
  - iso8859_6
  - iso8859_7
  - iso8859_8
  - iso8859_9
  - iso8859_15
  - sjis
  - tis620
  - unicode_le
  default: protocol
  description: Specify the character encoding of the original basic authentication
    values. Basic authentication credentials are combined and base64 encoded in the
    authorization header of the request. The contents of the <tt>Authorization</tt>
    header are transcoded to UTF-8. The default value represents ISO-8859-1 Latin
    1.
  cli_alias: credential-charset
- name: SSLServerConfigType
  type: String
  enum:
  - server
  - sni
  default: server
  test_value: '"server"'
  description: TLS server type
  cli_alias: ssl-config-type
- name: SSLServer
  type: String
  reference_to: SSLServerProfile
  description: Specify the TLS server profile to secure connections from clients.
    <b>Note:</b> The TLS server profile that secures the HTTP/2 connection must use
    the TLS 1.2 or later protocol with a cipher that is secure according to RFC 7540.
  test_value: '"AccTest_SSLServerProfile"'
  test_bed_value: datapower_ssl_server_profile.acc_test.id
  cli_alias: ssl-server
  required_when:
  - evaluation: property-equals
    attribute: SSLServerConfigType
    value:
    - server
  ignored_when:
  - evaluation: logical-true
- name: SSLSNIServer
  type: String
  reference_to: SSLSNIServerProfile
  description: Specify the TLS SNI server profile to secure connections from clients.
    <b>Note:</b> The TLS SNI server profile that secures the HTTP/2 connection must
    use the TLS 1.2 or later protocol with a cipher that is secure according to RFC
    7540.
  cli_alias: ssl-sni-server
  required_when:
  - evaluation: property-equals
    attribute: SSLServerConfigType
    value:
    - sni
  ignored_when:
  - evaluation: logical-true
- name: HTTP2MaxStreams
  type: Int64
  minimum: 1
  maximum: 500
  default: 100
  description: Specify the maximum number of concurrent streams that the client can
    have outstanding at the same time. Enter a value in the range 1 - 500. The default
    value is 100. <p>The limit applies to the number of streams that the client allows
    the target to create. The greater the number of streams in use, the more resources
    the client uses. Resources include memory and the network connections to the destination.</p>
  cli_alias: http2-max-streams
- name: HTTP2MaxFrameSize
  type: Int64
  minimum: 16384
  maximum: 16777215
  default: 16384
  description: Specify the largest payload frame size that the client can send. Enter
    a value in the range 16384 - 16777215. The default value is 16384.
  cli_alias: http2-max-frame
- name: HTTP2StreamHeader
  type: Bool
  default: false
  description: Specify whether to enable the HTTP/2 stream identifier header in the
    request or response. When enabled, the HTTP/2 stream identifier is included in
    the <tt>X-DP-http2-stream</tt> header. With this header, you can correlate the
    HTTP/2 stream. The default behavior is disabled.
  cli_alias: http2-stream-header
- name: ChunkedEncoding
  type: Bool
  default: true
  description: 'Specify whether to enable responses to use chunked transfer-encoding.
    By default, HTTP responses use <tt>Transfer-Encoding: chunked</tt> .'
  cli_alias: chunked-encoding
- name: HeaderTimeout
  type: Int64
  maximum: 3600000
  default: 30000
  description: Specify the maximum duration in milliseconds to allow for request headers
    processing. When the value is greater than 0, request header processing must complete
    before the duration elapses. Enter a value in the range 0 - 3600000, where a value
    of 0 disables the timer. The default value is 30000.
  cli_alias: header-timeout
- name: HTTP2IdleTimeout
  type: Int64
  maximum: 3600000
  description: Specify the maximum idle duration in milliseconds to allow before closing
    the HTTP/2 connection. Enter a value in the range 0 - 3600000, where a value of
    0 disables the timer. The default value is 0.
  cli_alias: http2-idle-timeout
